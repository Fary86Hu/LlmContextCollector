@using LlmContextCollector.Models
@using LlmContextCollector.Utils
@using LlmContextCollector.Services
@inject IClipboard Clipboard
@inject AppState AppState
@inject GitWorkflowService GitWorkflowService
@inject GitSuggestionService GitSuggestionService
@implements IDisposable

@if (IsVisible)
{
    <div class="modal-backdrop">
        <div class="modal-dialog diff-dialog">
            <div class="modal-header">
                <h3>V√°ltoz√°sok Elemz√©se √©s Elfogad√°sa</h3>
                <div class="header-controls">
                    @if (!string.IsNullOrEmpty(FullLlmResponse))
                    {
                        <button @onclick="ToggleFullResponseView">
                            @(_isFullResponseView ? "Vissza a V√°ltoz√°sokhoz" : "Teljes LLM V√°lasz")
                        </button>
                    }
                    <button class="close-btn" @onclick="Close">&times;</button>
                </div>
            </div>
            <div class="modal-body diff-body">
                <div class="diff-left-pane">
                    @if (_isGitDiffMode)
                    {
                        <div class="diff-selector-box">
                            <strong>K√ºl√∂nbs√©gek forr√°sa:</strong>
                            <div class="diff-options">
                                <label><input type="radio" name="diff-mode" @onchange="() => _selectedDiffMode = GitWorkflowService.DiffMode.Uncommitted" checked="@(_selectedDiffMode == GitWorkflowService.DiffMode.Uncommitted)" /> Jelenlegi v√°ltoz√°sok</label>
                                <label><input type="radio" name="diff-mode" @onchange="() => _selectedDiffMode = GitWorkflowService.DiffMode.SinceBranchCreation" checked="@(_selectedDiffMode == GitWorkflowService.DiffMode.SinceBranchCreation)" /> Branch nyit√°sa √≥ta</label>
                                <label><input type="radio" name="diff-mode" @onchange="() => _selectedDiffMode = GitWorkflowService.DiffMode.AgainstBranch" checked="@(_selectedDiffMode == GitWorkflowService.DiffMode.AgainstBranch)" /> M√°sik branch-hez k√©pest</label>
                            </div>
                            @if (_selectedDiffMode == GitWorkflowService.DiffMode.AgainstBranch)
                            {
                                <select @bind="_selectedTargetBranch">
                                    @foreach (var branch in _allBranches)
                                    {
                                        <option value="@branch">@branch</option>
                                    }
                                </select>
                            }
                            <button @onclick="LoadSelectedDiffsAsync" disabled="@_isLoadingDiffs">
                                @if (_isLoadingDiffs)
                                {
                                    <span class="spinner-small"></span>
                                }
                                else
                                {
                                    <span>K√ºl√∂nbs√©gek mutat√°sa</span>
                                }
                            </button>
                        </div>
                    }

                    <div class="suggestion-box">
                        <div class="suggestion-header">
                            <strong>@(_hasSuggestions ? "Javaslatok:" : "Git M≈±veletek")</strong>
                            @if (_isGitDiffMode)
                            {
                                <button class="refresh-btn" @onclick="RefreshSuggestionsAsync" title="Javaslatok friss√≠t√©se" disabled="@_isRefreshingSuggestions">
                                    @if (_isRefreshingSuggestions)
                                    {
                                        <span class="spinner-small"></span>
                                    }
                                    else
                                    {
                                        <span>üîÑ</span>
                                    }
                                </button>
                            }
                        </div>
                        <div class="suggestion-item">
                            <label>Branch:</label>
                            <input type="text" @bind="_suggestedBranch" placeholder="pl. feature/uj-funkcio" />
                            @if (_hasSuggestions)
                            {
                                <button @onclick="() => CopyToClipboard(_suggestedBranch)">M√°sol</button>
                            }
                        </div>
                        <div class="suggestion-item">
                            <label>Commit:</label>
                            <textarea rows="5" @bind="_suggestedCommit" placeholder="pl. feat: √öj funkci√≥ implement√°l√°sa..."></textarea>
                            @if (_hasSuggestions)
                            {
                                <button @onclick="() => CopyToClipboard(_suggestedCommit)">M√°sol</button>
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(_globalExplanationText))
                    {
                        <div class="diff-global-explanation">
                            <strong>Glob√°lis Magyar√°zat:</strong>
                            <pre>@_globalExplanationText</pre>
                        </div>
                    }
                    <strong>Feldolgozott f√°jlok: (@_localDiffResults.Count)</strong>
                    <fieldset class="file-list-fieldset" disabled="@_isFullResponseView">
                        <div class="diff-file-list">
                            @foreach (var result in _localDiffResults)
                            {
                                <div @key="result.Path"
                                     class="diff-file-item @GetStatusClass(result) @(_selectedResult != null && _selectedResult.Path == result.Path ? "selected" : "")"
                                     @onclick="() => SelectResult(result)">
                                    <input type="checkbox" @bind="result.IsSelectedForAccept" @onclick:stopPropagation />
                                    <span class="status-badge @GetStatusClass(result)">@GetStatusText(result)</span>
                                    <span>@result.Path</span>
                                </div>
                            }
                        </div>
                    </fieldset>
                </div>
                <div class="diff-right-pane">
                    @if (_isFullResponseView)
                    {
                        <div class="full-response-view">
                            <strong>Teljes LLM v√°lasz:</strong>
                            <textarea readonly>@FullLlmResponse</textarea>
                        </div>
                    }
                    else if (_selectedResult != null)
                    {
                        <div class="diff-view-switcher">
                            <label>
                                <input type="radio" name="diff-view" value="unified" checked="@(_viewMode == "unified")" @onchange="@(() => SetViewMode("unified"))" />
                                Egys√©ges n√©zet
                            </label>
                            <label>
                                <input type="radio" name="diff-view" value="sbs" checked="@(_viewMode == "sbs")" @onchange="@(() => SetViewMode("sbs"))" />
                                Side-by-Side
                            </label>
                        </div>
                        <div class="diff-content-wrapper">
                            @if (_viewMode == "unified")
                            {
                                <pre class="diff-content unified-diff"><code>@_unifiedDiffMarkup</code></pre>
                            }
                            else
                            {
                                <div class="sbs-diff-container">
                                    <div class="sbs-pane">
                                        <strong>Eredeti</strong>
                                        <pre class="diff-content"><code>@_sbsLeftMarkup</code></pre>
                                    </div>
                                    <div class="sbs-pane">
                                        <strong>M√≥dos√≠tott</strong>
                                        <pre class="diff-content"><code>@_sbsRightMarkup</code></pre>
                                    </div>
                                </div>
                            }
                            <div class="diff-scrollbar-track">
                                @foreach (var marker in _diffMarkers)
                                {
                                    <div class="diff-marker @marker.Type" style="top: @marker.TopPercent.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)%"></div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="editor-placeholder">V√°lassz egy f√°jlt a v√°ltoz√°sok megtekint√©s√©hez. Vagy v√°lassz m√°sik k√ºl√∂nbs√©g forr√°st.</div>
                    }
                </div>

            </div>
            <div class="modal-footer">
                <span>@($"{_localDiffResults.Count(r => r.IsSelectedForAccept)} f√°jl kijel√∂lve")</span>
                <button @onclick="Close">Bez√°r√°s</button>
                <button class="primary" @onclick="AcceptSelectedChanges" disabled="@(!_localDiffResults.Any(r => r.IsSelectedForAccept))">
                    Kijel√∂ltek elfogad√°sa
                </button>
                @{
                    var onCorrectBranch = !string.IsNullOrWhiteSpace(_suggestedBranch) && AppState.CurrentGitBranch == _suggestedBranch;
                }
                <button class="primary" @onclick="CreateBranch" disabled="@(string.IsNullOrWhiteSpace(_suggestedBranch) || onCorrectBranch)">
                    Branch L√©trehoz√°sa
                </button>
                <button class="primary" @onclick="Commit" disabled="@(string.IsNullOrWhiteSpace(_suggestedCommit) || !_localDiffResults.Any(r => r.IsSelectedForAccept))">
                    Commit
                </button>
                <button class="primary commit-btn" @onclick="Push">
                    Push
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public string GlobalExplanation { get; set; } = string.Empty;

    [Parameter]
    public string FullLlmResponse { get; set; } = string.Empty;

    [Parameter]
    public List<DiffResult>? DiffResults { get; set; }

    [Parameter]
    public EventCallback<List<DiffResult>> OnAccept { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<string> OnCreateBranch { get; set; }

    [Parameter]
    public EventCallback<CommitAndPushArgs> OnCommit { get; set; }

    [Parameter]
    public EventCallback<CommitAndPushArgs> OnPush { get; set; }

    private List<DiffResult> _localDiffResults = new();
    private DiffResult? _selectedResult;
    private string _viewMode = "unified";
    private MarkupString _unifiedDiffMarkup;
    private MarkupString _sbsLeftMarkup;
    private MarkupString _sbsRightMarkup;

    private record DiffMarkerInfo(string Type, double TopPercent);
    private List<DiffMarkerInfo> _diffMarkers = new();

    private string _suggestedBranch = string.Empty;
    private string _suggestedCommit = string.Empty;
    private string _globalExplanationText = string.Empty;
    private bool _hasSuggestions = false;
    private bool _isFullResponseView = false;
    private bool _isGitDiffMode = false;

    // New state for Git diff selection
    private GitWorkflowService.DiffMode _selectedDiffMode = GitWorkflowService.DiffMode.Uncommitted;
    private List<string> _allBranches = new();
    private string? _selectedTargetBranch;
    private bool _isLoadingDiffs = false;
    private bool _isRefreshingSuggestions = false;


    protected override void OnInitialized()
    {
        AppState.PropertyChanged += OnAppStateChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            _localDiffResults = DiffResults?.ToList() ?? new();
            _isGitDiffMode = string.IsNullOrEmpty(FullLlmResponse);

            if (_isGitDiffMode)
            {
                _suggestedBranch = string.Empty;
                _suggestedCommit = string.Empty;
                _hasSuggestions = false;
                _globalExplanationText = string.Empty; // No initial explanation for git diff
                await LoadBranchesAsync();
            }
            else
            {
                // This is from clipboard or OpenRouter, parse suggestions immediately.
                ParseGlobalExplanation();
            }

            if (_selectedResult == null || !_localDiffResults.Any(d => d.Path == _selectedResult.Path))
            {
                SelectResult(_localDiffResults.FirstOrDefault());
            }
        }
    }

    private async void OnAppStateChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AppState.CurrentGitBranch))
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        AppState.PropertyChanged -= OnAppStateChanged;
    }

    private void ToggleFullResponseView()
    {
        _isFullResponseView = !_isFullResponseView;
    }

    private async Task LoadBranchesAsync()
    {
        _allBranches = await GitWorkflowService.GetBranchesAsync();
        if (_allBranches.Any())
        {
            _selectedTargetBranch = _allBranches.FirstOrDefault(b => b == "main" || b == "master") ?? _allBranches.First();
        }
    }

    private async Task LoadSelectedDiffsAsync()
    {
        _isLoadingDiffs = true;
        StateHasChanged();
        try
        {
            _localDiffResults = await GitWorkflowService.GetDiffsAsync(_selectedDiffMode, _selectedTargetBranch);
            _suggestedBranch = string.Empty;
            _suggestedCommit = string.Empty;
            _hasSuggestions = false;
            SelectResult(_localDiffResults.FirstOrDefault());
        }
        finally
        {
            _isLoadingDiffs = false;
            StateHasChanged();
        }
    }

    private async Task RefreshSuggestionsAsync()
    {
        if (!_localDiffResults.Any())
        {
            AppState.StatusText = "Nincsenek k√ºl√∂nbs√©gek, amik alapj√°n javaslatot lehetne gener√°lni.";
            return;
        }

        _isRefreshingSuggestions = true;
        StateHasChanged();

        try
        {
            var (branch, commit) = await GitSuggestionService.GetSuggestionsAsync(_localDiffResults, _globalExplanationText);
            _suggestedBranch = branch ?? "hiba-a-javaslatban";
            _suggestedCommit = commit ?? "Hiba t√∂rt√©nt a commit √ºzenet gener√°l√°sakor.";
            _hasSuggestions = branch != null;
        }
        finally
        {
            _isRefreshingSuggestions = false;
            StateHasChanged();
        }
    }

    private void ParseGlobalExplanation()
    {
        _hasSuggestions = false;
        _suggestedBranch = string.Empty;
        _suggestedCommit = string.Empty;
        _globalExplanationText = GlobalExplanation;

        if (string.IsNullOrEmpty(GlobalExplanation)) return;

        var branchMatch = System.Text.RegularExpressions.Regex.Match(GlobalExplanation, @"\[BRANCH_SUGGESTION\]([\s\S]*?)\[/BRANCH_SUGGESTION\]");
        var commitMatch = System.Text.RegularExpressions.Regex.Match(GlobalExplanation, @"\[COMMIT_SUGGESTION\]([\s\S]*?)\[/COMMIT_SUGGESTION\]");

        if (branchMatch.Success && commitMatch.Success)
        {
            _hasSuggestions = true;
            _suggestedBranch = branchMatch.Groups[1].Value.Trim();
            _suggestedCommit = commitMatch.Groups[1].Value.Trim();
            _globalExplanationText = System.Text.RegularExpressions.Regex.Replace(GlobalExplanation, @"\[BRANCH_SUGGESTION\][\s\S]*?\[/COMMIT_SUGGESTION\]\s*", "").Trim();
        }
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await Clipboard.SetTextAsync(text);
        }
    }

    private void SelectResult(DiffResult? result)
    {
        _selectedResult = result;
        _viewMode = "unified";
        GenerateDiffView();
    }

    private void SetViewMode(string newMode)
    {
        if (_viewMode == newMode) return;
        _viewMode = newMode;
        GenerateDiffView();
    }

    private void GenerateDiffView()
    {
        if (_selectedResult != null)
        {
            var (unified, sbsLeft, sbsRight) = DiffUtility.GenerateDiffMarkup(_selectedResult.OldContent, _selectedResult.NewContent);
            _unifiedDiffMarkup = unified;
            _sbsLeftMarkup = sbsLeft;
            _sbsRightMarkup = sbsRight;
            GenerateDiffMarkers();
        }
        else
        {
            _unifiedDiffMarkup = new MarkupString("");
            _sbsLeftMarkup = new MarkupString("");
            _sbsRightMarkup = new MarkupString("");
            _diffMarkers.Clear();
        }
    }

    private void GenerateDiffMarkers()
    {
        _diffMarkers.Clear();
        if (_selectedResult == null) return;

        var oldText = _selectedResult.OldContent;
        var newText = _selectedResult.NewContent;

        var oldLines = oldText.Replace("\r\n", "\n").Split('\n');
        var newLines = newText.Replace("\r\n", "\n").Split('\n');
        var opcodes = DiffUtility.GetOpcodes(oldLines, newLines);

        double totalLines = 0;
        if (_viewMode == "unified")
        {
            totalLines = opcodes.Sum(op => op.Tag switch
            {
                'e' => op.I2 - op.I1,
                'd' => op.I2 - op.I1,
                'i' => op.J2 - op.J1,
                'r' => (op.I2 - op.I1) + (op.J2 - op.J1),
                _ => 0
            });
        }
        else // sbs
        {
            totalLines = opcodes.Sum(op => op.Tag switch
            {
                'e' => op.I2 - op.I1,
                'd' => op.I2 - op.I1,
                'i' => op.J2 - op.J1,
                'r' => Math.Max(op.I2 - op.I1, op.J2 - op.J1),
                _ => 0
            });
        }

        if (totalLines < 1) return;

        double currentLine = 0;
        foreach (var op in opcodes)
        {
            double linesInOp = 0;
            string? markerType = null;

            if (_viewMode == "unified")
            {
                switch (op.Tag)
                {
                    case 'e': linesInOp = op.I2 - op.I1; break;
                    case 'd': linesInOp = op.I2 - op.I1; markerType = "del"; break;
                    case 'i': linesInOp = op.J2 - op.J1; markerType = "add"; break;
                    case 'r': linesInOp = (op.I2 - op.I1) + (op.J2 - op.J1); markerType = "replace"; break;
                }
            }
            else // sbs
            {
                switch (op.Tag)
                {
                    case 'e': linesInOp = op.I2 - op.I1; break;
                    case 'd': linesInOp = op.I2 - op.I1; markerType = "del"; break;
                    case 'i': linesInOp = op.J2 - op.J1; markerType = "add"; break;
                    case 'r': linesInOp = Math.Max(op.I2 - op.I1, op.J2 - op.J1); markerType = "replace"; break;
                }
            }

            if (markerType != null)
            {
                _diffMarkers.Add(new DiffMarkerInfo(markerType, (currentLine / totalLines) * 100));
            }
            currentLine += linesInOp;
        }
    }


    private async Task AcceptSelectedChanges()
    {
        var accepted = _localDiffResults?.Where(r => r.IsSelectedForAccept).ToList();
        if (accepted != null && accepted.Any())
        {
            await OnAccept.InvokeAsync(accepted);
        }
    }

    private async Task CreateBranch()
    {
        if (!string.IsNullOrWhiteSpace(_suggestedBranch))
        {
            await OnCreateBranch.InvokeAsync(_suggestedBranch);
        }
    }

    private async Task Commit()
    {
        var accepted = _localDiffResults?.Where(r => r.IsSelectedForAccept).ToList();
        if (accepted != null && accepted.Any() && !string.IsNullOrWhiteSpace(_suggestedCommit))
        {
            var args = new CommitAndPushArgs(_suggestedBranch, _suggestedCommit, accepted);
            await OnCommit.InvokeAsync(args);
        }
    }

    private async Task Push()
    {
        var branchToPush = AppState.CurrentGitBranch;
        if (!string.IsNullOrWhiteSpace(branchToPush))
        {
            var accepted = _localDiffResults?.Where(r => r.IsSelectedForAccept).ToList() ?? new List<DiffResult>();
            var args = new CommitAndPushArgs(branchToPush, _suggestedCommit, accepted);
            await OnPush.InvokeAsync(args);
        }
    }

    private string GetStatusText(DiffResult result)
    {
        return result.Status switch
        {
            DiffStatus.NewFromModified => "√öJ (m√≥dos√≠tottk√©nt jel√∂lve)",
            DiffStatus.Deleted => "T√ñR√ñLT",
            _ => result.Status.ToString().ToUpper()
        };
    }

    private string GetStatusClass(DiffResult result)
    {
        return result.Status switch
        {
            DiffStatus.New => "new",
            DiffStatus.Modified => "modified",
            DiffStatus.Deleted => "deleted",
            DiffStatus.Accepted => "accepted",
            DiffStatus.Error => "error",
            DiffStatus.NewFromModified => "new",
            _ => ""
        };
    }

    private async Task Close()
    {
        _selectedResult = null;
        _isFullResponseView = false;
        _localDiffResults.Clear();
        _allBranches.Clear();
        await OnClose.InvokeAsync();
    }
}
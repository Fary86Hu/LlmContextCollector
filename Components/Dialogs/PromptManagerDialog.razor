@inject PromptService PromptService

@if (IsVisible)
{
    <div class="modal-backdrop">
        <div class="modal-dialog">
            <div class="modal-header">
                <h3>Prompt Sablon Kezelő</h3>
                <button class="close-btn" @onclick="Close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="prompt-manager-container">
                    <!-- Bal oldali lista -->
                    <div class="prompt-list-pane">
                        <strong>Mentett Promptok</strong>
                        <div class="prompt-list">
                            @foreach (var prompt in _promptsInManager)
                            {
                                <div class="prompt-list-item @(prompt.Id == _selectedPrompt?.Id ? "selected" : "")"
                                     @onclick="() => SelectPrompt(prompt)">
                                    @prompt.Title
                                </div>
                            }
                        </div>
                         <div class="prompt-list-actions">
                            <button @onclick="NewPrompt">Új Prompt</button>
                            <button @onclick="DeleteSelectedPrompt" disabled="@(_selectedPrompt == null)">Törlés</button>
                        </div>
                    </div>

                    <!-- Jobb oldali szerkesztő -->
                    <div class="prompt-editor-pane">
                        @if (_selectedPrompt != null)
                        {
                            <label for="prompt-title">Cím:</label>
                            <input id="prompt-title" type="text" @bind="_selectedPrompt.Title" />

                            <label for="prompt-content">Tartalom:</label>
                            <textarea id="prompt-content" @bind="_selectedPrompt.Content"></textarea>
                        }
                        else
                        {
                            <div class="editor-placeholder">Válassz ki egy promptot a szerkesztéshez, vagy hozz létre egy újat.</div>
                        }
                    </div>
                </div>
                 <div class="global-prefix-editor">
                    <label for="global-prefix">Globális prompt előtag (mindig bekerül a promptok és a fájlok közé):</label>
                    <textarea id="global-prefix" @bind="_globalPrefix" rows="4"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="Close">Mégsem</button>
                <button class="primary" @onclick="SaveChanges">Mentés és Bezárás</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private List<PromptTemplate> _promptsInManager = new();
    private PromptTemplate? _selectedPrompt;
    private string _globalPrefix = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        // Mély másolatot készítünk, hogy a "Mégsem" gomb ne mentse a változásokat
        _promptsInManager = (await PromptService.GetPromptsAsync()).Select(p => p.Clone()).ToList();
        _globalPrefix = await PromptService.GetGlobalPrefixAsync();
        _selectedPrompt = null;
    }

    private void SelectPrompt(PromptTemplate prompt)
    {
        _selectedPrompt = prompt;
    }

    private void NewPrompt()
    {
        var newPrompt = new PromptTemplate { Title = "Új prompt", Content = "" };
        _promptsInManager.Add(newPrompt);
        SelectPrompt(newPrompt);
    }

    private void DeleteSelectedPrompt()
    {
        if (_selectedPrompt != null)
        {
            _promptsInManager.Remove(_selectedPrompt);
            _selectedPrompt = null;
        }
    }
    
    private async Task SaveChanges()
    {
        await PromptService.SaveAllAsync(_promptsInManager, _globalPrefix);
        await Close();
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}
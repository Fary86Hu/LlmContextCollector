@inject AppState AppState
@inject RelevanceFinderService RelevanceFinderService
@using LlmContextCollector.Models
@using System.IO

@if (IsVisible)
{
    <div class="modal-backdrop">
        <div class="modal-dialog search-dialog">
            <div class="modal-header">
                <h3>Szemantikus Keresés</h3>
                <button class="close-btn" @onclick="Close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="search-dialog-top-pane">
                    <textarea class="search-prompt-editor" placeholder="Keresési prompt (a fő promptot használja, ha üres)..." @bind="_searchPrompt"></textarea>
                    <div class="search-controls">
                        <div class="search-options">
                            <span>Keresés itt:</span>
                            <label><input type="checkbox" @bind="_searchInProgramFiles" /> Programfájlok</label>
                            <label><input type="checkbox" @bind="_searchInOtherDocuments" /> Egyéb dokumentumok</label>
                        </div>
                        <button @onclick="ExecuteSearch" disabled="@_isSearching">
                            @if (_isSearching)
                            {
                                <span class="spinner"></span>
                                <span>Keresés...</span>
                            }
                            else
                            {
                                <span>Keresés</span>
                            }
                        </button>
                    </div>
                </div>
                <div class="search-dialog-main-pane">
                    <div class="search-context-pane">
                        <strong>Keresési kontextus</strong>
                        <div class="search-context-list">
                            @if (!_contextFilesForSearch.Any())
                            {
                                <div class="editor-placeholder">Nincs fájl a fő kontextus listában.</div>
                            }
                            @foreach (var file in _contextFilesForSearch)
                            {
                                <div @key="file.FilePath" class="search-context-item" title="@file.FilePath">
                                    <label>
                                        <input type="checkbox" @bind="file.IsUsedForContext" />
                                        <span class="search-context-path">@Path.GetFileName(file.FilePath)</span>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="search-results-pane">
                        <strong>Találatok (@_searchResults.Count)</strong>
                        <div class="search-results-list">
                            @if (!_searchResults.Any() && !_isSearching)
                            {
                                <div class="editor-placeholder">Nincs találat, vagy még nem indított keresést.</div>
                            }
                            @foreach (var vm in _searchResults)
                            {
                                <div @key="vm.Result.FilePath" class="search-result-item @(_selectedResult == vm.Result ? "selected" : "")" @onclick="() => SelectResult(vm.Result)">
                                    <input type="checkbox" @bind="vm.IsSelected" @onclick:stopPropagation />
                                    <span class="search-result-score">@vm.Result.Score.ToString("F2")</span>
                                    <span class="search-result-path">@vm.Result.FilePath</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="search-preview-pane">
                        <strong>Előnézet</strong>
                        <textarea readonly class="preview-box">@_previewContent</textarea>
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button @onclick="Close">Mégsem</button>
                <button class="primary" @onclick="Accept" disabled="@(!_searchResults.Any(vm => vm.IsSelected))">Kijelöltek Hozzáadása</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnAccept { get; set; }

    private string _searchPrompt = string.Empty;
    private bool _isSearching = false;
    private List<SearchResultViewModel> _searchResults = new();
    private RelevanceResult? _selectedResult;
    private string _previewContent = string.Empty;
    
    // New state properties
    private bool _searchInProgramFiles = true;
    private bool _searchInOtherDocuments = false;
    private List<ContextFileViewModel> _contextFilesForSearch = new();
    
    private const string AdoFilePrefix = "[ADO]";

    private class SearchResultViewModel
    {
        public RelevanceResult Result { get; }
        public bool IsSelected { get; set; }
        public SearchResultViewModel(RelevanceResult result) { Result = result; }
    }

    // New ViewModel for context files
    private class ContextFileViewModel
    {
        public string FilePath { get; set; } = string.Empty;
        public bool IsUsedForContext { get; set; }
    }


    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            if (string.IsNullOrWhiteSpace(_searchPrompt))
            {
                _searchPrompt = AppState.PromptText;
            }
            _searchResults.Clear();
            _selectedResult = null;
            _previewContent = string.Empty;
            
            _contextFilesForSearch = AppState.SelectedFilesForContext
                .Select(f => new ContextFileViewModel { FilePath = f, IsUsedForContext = false })
                .ToList();
            
            _searchInProgramFiles = true;
            _searchInOtherDocuments = false;
        }
    }

    private async Task ExecuteSearch()
    {
        _isSearching = true;
        _searchResults.Clear();
        _selectedResult = null;
        _previewContent = string.Empty;
        StateHasChanged();

        var originalPrompt = AppState.PromptText;
        var originalContext = AppState.SelectedFilesForContext.ToList();
        
        AppState.PromptText = _searchPrompt;
        var filesForContextQuery = _contextFilesForSearch.Where(f => f.IsUsedForContext).Select(f => f.FilePath).ToList();
        
        AppState.SelectedFilesForContext.Clear();
        foreach (var file in filesForContextQuery)
        {
            AppState.SelectedFilesForContext.Add(file);
        }

        try
        {
            var results = await RelevanceFinderService.FindRelevantFilesAsync();
            var filteredResults = results.Where(r =>
                (_searchInProgramFiles && !r.FilePath.StartsWith(AdoFilePrefix)) ||
                (_searchInOtherDocuments && r.FilePath.StartsWith(AdoFilePrefix))
            ).ToList();
            
            _searchResults = filteredResults.Select(r => new SearchResultViewModel(r)).ToList();
        }
        finally
        {
            AppState.PromptText = originalPrompt;
            AppState.SelectedFilesForContext.Clear();
            foreach (var file in originalContext)
            {
                AppState.SelectedFilesForContext.Add(file);
            }
            
            _isSearching = false;
            StateHasChanged();
        }
    }

    private async Task SelectResult(RelevanceResult result)
    {
        _selectedResult = result;
        _previewContent = "Betöltés...";
        StateHasChanged();

        string fullPath;
        if (result.FilePath.StartsWith(AdoFilePrefix))
        {
            fullPath = Path.Combine(AppState.AdoDocsPath, result.FilePath.Substring(AdoFilePrefix.Length));
        }
        else
        {
            fullPath = Path.Combine(AppState.ProjectRoot ?? "", result.FilePath.Replace('/', Path.DirectorySeparatorChar));
        }

        try
        {
            if (File.Exists(fullPath))
            {
                _previewContent = await File.ReadAllTextAsync(fullPath);
            }
            else
            {
                _previewContent = $"Hiba: Fájl nem található az útvonalon: {fullPath}";
            }
        }
        catch (Exception ex)
        {
            _previewContent = $"Hiba a fájl olvasásakor: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task Accept()
    {
        var filesToAdd = _searchResults.Where(vm => vm.IsSelected).Select(vm => vm.Result.FilePath).ToList();
        if (filesToAdd.Any())
        {
            await OnAccept.InvokeAsync(filesToAdd);
        }
        await Close();
    }

    private async Task Close()
    {
        _searchPrompt = string.Empty;
        _contextFilesForSearch.Clear();
        await OnClose.InvokeAsync();
    }
}